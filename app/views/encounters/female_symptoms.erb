<script type="text/javascript" type="text/javascript" src="/assets/jquery.js"></script>
<script type="text/javascript" type="text/javascript" src="/assets/top-icon.js"></script>

<script>
    var tt_cancel_destination = "/patient/dashboard/<%= @patient_obj.patient_id %>/tasks"
    var symptoms_values = [];

    function setConceptNamesAndValues(symptoms, observations, obs_type){

        var values_string = selectedValue(observations);

        /* clear the fields*/
        for (var index = 0; index < symptoms.length; index++){
            var concept_name        = obs_type + index +"_concept_name";
            var value_coded_or_text = obs_type + index +"_value_coded_or_text";

            if(values_string.contains(symptoms[index][0]) && symptoms[index][1] != ""){
                $(concept_name).value         = symptoms[index][1];
                $(value_coded_or_text).value  = 'YES';
            }
            else{
                $(concept_name).value         = '';
                $(value_coded_or_text).value  = '';
            }
        }
    }
    var selected_danger_signs;
    function selectedInitialDangerSigns() {
        selected_danger_signs = __$('touchscreenInput' + tstCurrentPage).value;

    }
    function hideSelectedInitialDangerSigns() {
      alert(selected_danger_signs);
        __$('touchscreenInput' + tstCurrentPage).value = danger_signs;
        console.log(selected_danger_signs);
        return selected_danger_signs;
    }

    function hideSelectedValues(){
      dangerSigns = selected_danger_signs.split(";"); 
      liElements = document.getElementsByTagName("li");
      for (var i = 0; i<= dangerSigns.length - 1; i++){
        danger_sign = dangerSigns[i];
        for (var j=0; j<=liElements.length -1; j++){
          li_tst_value = liElements[j].getAttribute('tstvalue');
          if (danger_sign.trim().toUpperCase() == li_tst_value.trim().toUpperCase()){
            liElements[j].style.display = 'none';
            break;
          }
        }
      }
    }

    var currentKey = ""
    //var currentConcept = "Potential chest indrawing";
    var currentConcept = "";
    function loadArticles(){

        jQuery.ajax({
            type: "POST",
            url: "/home/retrieve_articles",
            data: "concept=" + currentConcept,
            success: function(results){
                results = eval("(" + results  + ")");
                currentKey = results["key"];
                title = results["data"]["title"];
                body = results["data"]["body"];
                author = results["data"]["author"];

                popupHeader = document.getElementsByClassName("popup-header")[0];
                popupHeader.innerHTML = title;
                popupContent = document.getElementsByClassName("popup-data")[0];
                popupContent.innerHTML = body;
                console.log(results);
            }

        });
    }

    function loadNextArticle(){
        jQuery.ajax({
            type: "POST",
            url: "/home/next_article",
            data: "key=" + currentKey,
            success: function(results){
                results = eval("(" + results  + ")");
                currentKey = results["key"];
                title = results["data"]["title"];
                body = results["data"]["body"];
                author = results["data"]["author"];
                disabled = (results["disabled"]);
                console.log(disabled == true);
                nextButton = document.getElementsByClassName("nextButton")[0];
                prevButton = document.getElementsByClassName("prevButton")[0];
                if (disabled == true){
                    nextButton.style.backgroundColor = 'gray';
                    prevButton.style.backgroundColor = '#6495ED';
                }else{
                    nextButton.style.backgroundColor = '#6495ED';
                    prevButton.style.backgroundColor = '#6495ED';
                }
                popupHeader = document.getElementsByClassName("popup-header")[0];
                popupHeader.innerHTML = title;
                popupContent = document.getElementsByClassName("popup-data")[0];
                popupContent.innerHTML = body;
            }

        });
    }

    function loadPrevArticle(){

        jQuery.ajax({
            type: "POST",
            url: "/home/previous_article",
            data: "key=" + currentKey,
            success: function(results){
                results = eval("(" + results  + ")");
                currentKey = results["key"];
                title = results["data"]["title"];
                body = results["data"]["body"];
                author = results["data"]["author"];
                disabled = (results["disabled"]);
                prevButton = document.getElementsByClassName("prevButton")[0];
                nextButton = document.getElementsByClassName("nextButton")[0];
                if (disabled == true){
                    prevButton.style.backgroundColor = 'gray';
                    nextButton.style.backgroundColor = '#6495ED';
                }else{
                    prevButton.style.backgroundColor = '#6495ED';
                    nextButton.style.backgroundColor = '#6495ED';
                }

                popupHeader = document.getElementsByClassName("popup-header")[0];
                popupHeader.innerHTML = title;
                popupContent = document.getElementsByClassName("popup-data")[0];
                popupContent.innerHTML = body;
            }

        });
    }

    function setListAttributes(){
        liElements = document.getElementsByTagName("li");
        for (i=0; i <= liElements.length - 1; i++){
            liElements[i].onmouseup = function(){
                currentConcept = this.getAttribute("tstvalue");
            }
        }
    }


    var age = '<%= @age %>';
    function notify_reason() {
        <% if params[:end_call] == 'true' %>
            showMessage('This call is missing symptoms. Please record symptoms.', false, false);
        <% end %>
    }
</script>

<style>
    #num{
        display: none;
    }
</style>
<body onLoad="notify_reason()">
    <%= render :partial => 'patient/birthdate/button_footer' %>

    <%= form_tag("/encounters/create", id: "pregnancy-status", method: 'post', enctype: 'multipart/form-data') do %>
        <%= hidden_field_tag "encounter[encounter_type]", EncounterType.find_by_name("MATERNAL HEALTH SYMPTOMS").id %>
        <%= hidden_field_tag "encounter[patient_id]", @patient_obj.patient_id %>
        <%= hidden_field_tag "encounter[encounter_datetime]", (session_date || DateTime.now()).to_s(:db) %>
        <%= hidden_field_tag "encounter[provider_id]", session[:user_id] %>

        <%= hidden_field_tag("observations[][concept_name]", "Maternal Health Symptoms") %>
        <%= select_tag "observations[][value_coded_or_text_multiple]", options_for_select(@maternal_health_symptoms , nil),
                       :helpText =>"Experiencing any of the following symptoms?",
                       :multiple => true,
                       :tt_onLoad => "showHelpButton();setListAttributes();",
                       :tt_onUnLoad => "hideHelpButton();",
                       :condition => 'parseInt(age) >= 5;',
                       :tt_pageStyleClass => 'longSelectList',
                       :id => "maternal_health_symptoms",
                       :allowFreeText => false
        %>


        <%= hidden_field_tag("observations[][concept_name]", "Danger signs") %>
        <%= select_tag "observations[][value_coded_or_text_multiple]", options_for_select(@danger_signs , nil),
                       :helpText =>"Select danger signs",
                       :multiple => true,
                       :optional => false,
                       :tt_onUnLoad => "selectedInitialDangerSigns();",
                       :tt_pageStyleClass => 'longSelectList',
                       :id => "danger_status",
                       :allowFreeText => false
        %>

        <%= hidden_field_tag("observations[][concept_name]", "Maternal health info") %>
        <%= select_tag "observations[][value_coded_or_text_multiple]", options_for_select(@health_info , nil),
                       :helpText =>"Does the caller want more information from below?",
                       :multiple => true,
                       :optional => false,
                       :tt_pageStyleClass => 'longSelectList',
                       :id => "more_info_topics",
                       :allowFreeText => false
        %>

        <%= hidden_field_tag("observations[][concept_name]", "Danger signs") %>
        <%= select_tag "observations[][value_coded_or_text_multiple]", options_for_select(@danger_signs , nil),
                       :helpText =>"Select additional danger signs",
                       :multiple => true,
                       :tt_pageStyleClass => 'longSelectList',
                       :tt_onLoad => "hideSelectedValues();",
                       :id => "additional_danger_signs",
                       :allowFreeText => false
        %>
    <% end %>
</body>